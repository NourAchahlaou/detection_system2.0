version: "3.9"

services:
  # Build the shared base image first
  base_image:
    container_name: airvision_base  
    build:
      context: ./backend/shared
      dockerfile: dockerfile
    image: airvision_base:latest
    command: ["echo", "Base image built successfully"]

  user_management:
    container_name: userManagementMicroservice
    depends_on:
      - base_image
      - databasePostgres
    build:
      context: ./backend/user_management
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8001:8000"
    networks:
      - airvision-net
    volumes:
      - ./backend/user_management:/usr/srv/user_management
      - ./.env:/usr/srv/.env

  artifact_keeper:
    container_name: artifact_keeper
    depends_on:
      - base_image
      - databasePostgres
    build:
      context: ./backend/artifact_keeper
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8002:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./backend/artifact_keeper:/usr/srv/artifact_keeper
      - ./.env:/usr/srv/.env
      - dataset:/app/shared/dataset
      - dataset_backup:/app/shared/backup
    user: "1001:1001"
    environment:
      - DATASET_BASE_PATH=/app/shared/dataset
      - DATASET_BACKUP_PATH=/app/shared/backup

  annotation:
    container_name: annotationMicroservice
    depends_on:
      - base_image
      - databasePostgres
      - artifact_keeper
    build:
      context: ./backend/annotation
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8004:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./backend/annotation:/usr/srv/annotation
      - ./.env:/usr/srv/.env
      - dataset:/app/shared/dataset
    user: "1001:1001"
    environment:
      - DATASET_BASE_PATH=/app/shared/dataset

  training:
    container_name: trainingMicroservice
    depends_on:
      - base_image
      - databasePostgres
      - artifact_keeper
    build:
      context: ./backend/training
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8005:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./backend/training:/usr/srv/training
      - ./.env:/usr/srv/.env
      - dataset:/app/shared/dataset
      - training_logs:/usr/srv/logs
      - models:/app/shared/models
    user: "1001:1001"
    environment:
      - DATASET_BASE_PATH=/app/shared/dataset
      - LOG_PATH=/usr/srv/logs
      - MODELS_BASE_PATH=/app/shared/models

  detection:
      container_name: detectionMicroservice
      depends_on:
        - base_image
        - databasePostgres
      build:
        context: ./backend/detection
        dockerfile: Dockerfile
      env_file:
        - ./.env
      extra_hosts:
        - "host.docker.internal:host-gateway"  
      ports:
        - "8006:8000"
      networks:
        - airvision-net
      volumes:
        - ./backend/detection:/usr/srv/detection
        - ./.env:/usr/srv/.env  
        - models:/app/shared/models  # Only mount models, not dataset
      user: "1001:1001"
      environment:
        - MODELS_BASE_PATH=/app/shared/models

  databasePostgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airbususer -d airvisiondb"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - airvision-net
    ports:
      - "5433:5432"

  airbus_ui:
    build:
      context: ./airbus_ui
      dockerfile: Dockerfile
    container_name: airbus_ui
    ports:
      - "3000:3000"
    depends_on:
      - user_management
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./airbus_ui:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=3000

  nginx:
    image: nginx:latest
    container_name: nginx_gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - dataset:/app/shared/dataset:ro
    depends_on:
      - user_management
      - artifact_keeper
      - airbus_ui
      - training
      - annotation
      - databasePostgres
      - detection
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net

networks:
  airvision-net:

volumes:
  user_postgres_data:
  
  dataset:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/dataset
  
  dataset_backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/backup
  
  training_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/logs
  
  models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/models