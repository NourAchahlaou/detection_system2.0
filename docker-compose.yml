version: "3.9"

services:
  # 1Ô∏è‚É£ Build shared base first
  base_image:
    container_name: airvision_base
    build:
      context: ./backend/shared
      dockerfile: Dockerfile
    image: airvision_base:latest
    command: ["echo", "Base image built successfully"]
    networks:
      - airvision-net

  # 2Ô∏è‚É£ Core infrastructure
  redis:
    image: redis:7-alpine
    container_name: airvision_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 60 1
    networks:
      - airvision-net
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # üÜï RabbitMQ for Event-Driven Architecture
  # rabbitmq:
  #   image: rabbitmq:3-management-alpine
  #   container_name: airvision_rabbitmq
  #   restart: unless-stopped
  #   environment:
  #     RABBITMQ_DEFAULT_USER: airvision
  #     RABBITMQ_DEFAULT_PASS: airvision123
  #     RABBITMQ_DEFAULT_VHOST: airvision
  #   ports:
  #     - "5672:5672"    # AMQP port
  #     - "15672:15672"  # Management UI
  #   networks:
  #     - airvision-net
  #   volumes:
  #     - rabbitmq_data:/var/lib/rabbitmq
  #   healthcheck:
  #     test: rabbitmq-diagnostics -q ping
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3

  databasePostgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airbususer -d airvisiondb"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - airvision-net
    ports:
      - "5433:5432"

  # üÜï Activity Service for Event Processing
  # activity_service:
  #   container_name: activity_service
  #   depends_on:
  #     base_image:
  #       condition: service_completed_successfully
  #     databasePostgres:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   build:
  #     context: ./backend/activity_service
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./.env
  #   ports:
  #     - "8008:8000"
  #   networks:
  #     - airvision-net
  #   volumes:
  #     - ./backend/activity_service/app:/usr/srv/activity_service/app
  #     - ./.env:/usr/srv/.env
  #   environment:
  #     - RABBITMQ_URL=amqp://airvision:airvision123@airvision_rabbitmq:5672/airvision

  # 3Ô∏è‚É£ Backend microservices (updated with RabbitMQ dependency)
  user_management:
    container_name: userManagementMicroservice
    depends_on:
      base_image:
        condition: service_completed_successfully
      databasePostgres:
        condition: service_healthy
      # rabbitmq:
      #   condition: service_healthy
    build:
      context: ./backend/user_management
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8001:8000"
    networks:
      - airvision-net
    volumes:
      - ./backend/user_management/app:/usr/srv/user_management/app
      - ./backend/user_management:/usr/srv/user_management
      - ./backend/user_management/migrations:/usr/srv/user_management/migrations  # üî• Add this
      - ./backend/user_management/alembic.ini:/usr/srv/user_management/alembic.ini  # üî• Add this
      - ./.env:/usr/srv/.env
    # environment:
    #   - RABBITMQ_URL=amqp://airvision:airvision123@airvision_rabbitmq:5672/airvision

  artifact_keeper:
    container_name: artifact_keeper
    depends_on:
      base_image:
        condition: service_completed_successfully
      databasePostgres:
        condition: service_healthy
      # rabbitmq:
      #   condition: service_healthy
    build:
      context: ./backend/artifact_keeper
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8002:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./backend/artifact_keeper/app:/usr/srv/artifact_keeper/app
      - ./.env:/usr/srv/.env
      - dataset:/app/shared/dataset
      - dataset_backup:/app/shared/backup
    user: "1001:1001"
    environment:
      - DATASET_BASE_PATH=/app/shared/dataset
      - DATASET_BACKUP_PATH=/app/shared/backup
      # - RABBITMQ_URL=amqp://airvision:airvision123@airvision_rabbitmq:5672/airvision

  annotation:
    container_name: annotationMicroservice
    depends_on:
      base_image:
        condition: service_completed_successfully
      databasePostgres:
        condition: service_healthy
      artifact_keeper:
        condition: service_started
      # rabbitmq:
      #   condition: service_healthy
    build:
      context: ./backend/annotation
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8004:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./backend/annotation/app:/usr/srv/annotation/app
      - ./.env:/usr/srv/.env
      - dataset:/app/shared/dataset
    user: "1001:1001"
    environment:
      - DATASET_BASE_PATH=/app/shared/dataset
      # - RABBITMQ_URL=amqp://airvision:airvision123@airvision_rabbitmq:5672/airvision

  training:
      container_name: trainingMicroservice
      depends_on:
        base_image:
          condition: service_completed_successfully
        databasePostgres:
          condition: service_healthy
        artifact_keeper:
          condition: service_started
        # rabbitmq:
        #   condition: service_healthy
      build:
        context: ./backend/training
        dockerfile: Dockerfile
      env_file:
        - ./.env
      ports:
        - "8005:8000"
      shm_size: '2gb'
      extra_hosts:
        - "host.docker.internal:host-gateway"
      networks:
        - airvision-net
      volumes:
        - ./backend/training/app:/usr/srv/training/app
        - ./.env:/usr/srv/.env
        - dataset:/app/shared/dataset
        - training_logs:/usr/srv/logs
        - models:/app/shared/models
      user: "1001:1001"
      environment:
        - DATASET_BASE_PATH=/app/shared/dataset
        - LOG_PATH=/usr/srv/logs
        - MODELS_BASE_PATH=/app/shared/models
        - NVIDIA_VISIBLE_DEVICES=all
        - NVIDIA_DRIVER_CAPABILITIES=compute,utility
        # - RABBITMQ_URL=amqp://airvision:airvision123@airvision_rabbitmq:5672/airvision
      # GPU Configuration
      deploy:
        resources:
          reservations:
            devices:
              - driver: nvidia
                count: all
                capabilities: [gpu]

  detection:
    container_name: detectionMicroservice
    depends_on:
      base_image:
        condition: service_completed_successfully
      databasePostgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    #   rabbitmq:
    #     condition: service_healthy
    build:
      context: ./backend/detection
      dockerfile: Dockerfile
    env_file:
      - ./.env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8006:8000"
    networks:
      - airvision-net
    volumes:
      - ./backend/detection/app:/usr/srv/detection/app
      - ./backend/detection:/usr/srv/detection
      - ./.env:/usr/srv/.env
      - models:/app/shared/models
    user: "1001:1001"
    environment:
      - MODELS_BASE_PATH=/app/shared/models
      - REDIS_URL=redis://airvision_redis:6379
      # - RABBITMQ_URL=amqp://airvision:airvision123@airvision_rabbitmq:5672/airvision

  video_streaming:
    container_name: video_streaming
    depends_on:
      base_image:
        condition: service_completed_successfully
      databasePostgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # rabbitmq:
      #   condition: service_healthy
    build:
      context: ./backend/video_streaming
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8007:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./backend/video_streaming/app:/usr/srv/video_streaming/app
      - ./.env:/usr/srv/.env
    environment:
      - REDIS_URL=redis://airvision_redis:6379
      # - RABBITMQ_URL=amqp://airvision:airvision123@airvision_rabbitmq:5672/airvision

  # 4Ô∏è‚É£ Frontend
  airbus_ui:
    build:
      context: ./airbus_ui
      dockerfile: Dockerfile
    container_name: airbus_ui
    ports:
      - "3000:3000"
    depends_on:
      user_management:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./airbus_ui:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=3000

  # 5Ô∏è‚É£ Gateway
  nginx:
    image: nginx:latest
    container_name: nginx_gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - dataset:/app/shared/dataset:ro
    depends_on:
      - user_management
      - artifact_keeper
      - airbus_ui
      - training
      - annotation
      - databasePostgres
      - detection
      # - activity_service
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net

networks:
  airvision-net:

volumes:
  user_postgres_data:
  redis_data:
  # rabbitmq_data:  # üÜï RabbitMQ data persistence
  dataset:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/dataset
  dataset_backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/backup
  training_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/logs
  models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/models