version: "3.9"

services:
  user_management:
    container_name: userManagementMicroservice
    build:
      context: ./backend/user_management
    env_file:
      - ./.env
    ports:
      - "8001:8000"
    depends_on:
      databasePostgres:
        condition: service_healthy
    networks:
      - airvision-net
    volumes:
      - ./backend/user_management:/usr/srv/user_management
      - ./.env:/usr/srv/.env

  artifact_keeper:
    container_name: artifact_keeper
    build:
      context: ./backend/artifact_keeper
    env_file:
      - ./.env
    ports:
      - "8002:8000"
    depends_on:
      databasePostgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./backend/artifact_keeper:/usr/srv/artifact_keeper
      - ./.env:/usr/srv/.env
      # Shared dataset volume with consistent path
      - dataset:/app/shared/dataset
      # Optional: Add backup volume for critical data
      - dataset_backup:/app/shared/backup
    user: "1001:1001"
    environment:
      - DATASET_BASE_PATH=/app/shared/dataset
      - DATASET_BACKUP_PATH=/app/shared/backup

  annotation:
    container_name: annotationMicroservice
    build:
      context: ./backend/annotation
    env_file:
      - ./.env
    ports:
      - "8004:8000"
    depends_on:
      databasePostgres:
        condition: service_healthy
      artifact_keeper:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./backend/annotation:/usr/srv/annotation
      - ./.env:/usr/srv/.env
      # Same shared dataset volume - READ ONLY for safety
      - dataset:/app/shared/dataset:ro
      # Separate volume for annotation outputs
      - annotations:/app/shared/annotations
    user: "1001:1001"
    environment:
      - DATASET_BASE_PATH=/app/shared/dataset
      - ANNOTATIONS_PATH=/app/shared/annotations


  databasePostgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airbususer -d airvisiondb"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - airvision-net
    ports:
      - "5433:5432"

  airbus_ui:
    build:
      context: ./airbus_ui
      dockerfile: Dockerfile
    container_name: airbus_ui
    ports:
      - "3000:3000"
    depends_on:
      - user_management
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - airvision-net
    volumes:
      - ./airbus_ui:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=3000

  nginx:
    image: nginx:latest
    container_name: nginx_gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - dataset:/app/shared/dataset:ro  
    depends_on:
      - user_management
      - artifact_keeper
      - airbus_ui
    networks:
      - airvision-net

networks:
  airvision-net:

volumes:
  user_postgres_data:
  dataset:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/dataset  # Optional: bind to host directory for easier backup
  annotations:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/annotations
  dataset_backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./shared_data/backup