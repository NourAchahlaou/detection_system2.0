"""create all user tables

Revision ID: 883acf940824
Revises: 
Create Date: 2025-09-05 22:50:22.439758

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '883acf940824'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('airbus_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=150), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('password', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('verified_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('activation_code', sa.String(length=8), nullable=True),
    sa.Column('activation_code_expires_at', sa.DateTime(), nullable=True),
    sa.Column('role', sa.Enum('DATA_MANAGER', 'OPERATOR', 'AUDITOR', name='roletype', schema='user_mgmt'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('airbus_id', name=op.f('uq_users_airbus_id')),
    schema='user_mgmt'
    )
    op.create_index(op.f('ix_user_mgmt_users_email'), 'users', ['email'], unique=True, schema='user_mgmt')
    op.create_table('user_tokens',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('access_key', sa.String(length=250), nullable=True),
    sa.Column('refresh_key', sa.String(length=250), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user_mgmt.users.id'], name=op.f('fk_user_tokens_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_tokens')),
    schema='user_mgmt'
    )
    op.create_index(op.f('ix_user_mgmt_user_tokens_access_key'), 'user_tokens', ['access_key'], unique=False, schema='user_mgmt')
    op.create_index(op.f('ix_user_mgmt_user_tokens_refresh_key'), 'user_tokens', ['refresh_key'], unique=False, schema='user_mgmt')
    op.create_table('work_hours',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('login_time', sa.DateTime(), nullable=False),
    sa.Column('logout_time', sa.DateTime(), nullable=True),
    sa.Column('total_minutes', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_mgmt.users.id'], name=op.f('fk_work_hours_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_work_hours')),
    schema='user_mgmt'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('work_hours', schema='user_mgmt')
    op.drop_index(op.f('ix_user_mgmt_user_tokens_refresh_key'), table_name='user_tokens', schema='user_mgmt')
    op.drop_index(op.f('ix_user_mgmt_user_tokens_access_key'), table_name='user_tokens', schema='user_mgmt')
    op.drop_table('user_tokens', schema='user_mgmt')
    op.drop_index(op.f('ix_user_mgmt_users_email'), table_name='users', schema='user_mgmt')
    op.drop_table('users', schema='user_mgmt')
    # ### end Alembic commands ###
